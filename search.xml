<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo-Travis CI 持续集成部署hexo]]></title>
    <url>%2Fblog%2Frjaz-0914212247.html</url>
    <content type="text"><![CDATA[前言刚把博客迁移到github上，但是hexo只是把编译之后的文件发布到github上，博客原文件只是保存在本地机器上，不方便切换机器以及博客源码的备份，网上找了几种办法，至于为什么最后还是用持续集成做且看下面分析 hexo源码备份管理bolg源码管理方法大概有这几种把 使用网盘来管理;但是每次换电脑都要下载一遍，每次写完了也需要上传来更新. 使用github来管理; hexo本来就是搭在github上，打在云虚拟机上另外再说，使用github来管理好处不用再多说了，具体用法就是把源文件push到博客的分支上，用分支来保存源文件，master分支来保存编译后的静态页面； 使用最新’hexo-deployer-git’，由于没有发布在npm上，所以只能从git上安装,支持源码和博客的部署,代码如下 1234567891011deploy: - type: git repo: git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git branch: master - type: git repo: git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git branch: src extend_dirs: / ignore_hidden: false ignore_pattern: public: . 但是发现一个问题，首次部署时候正常，但是之后部署就回吧主题文件themes也发布到master分支上。除非你每次部署的时候的手动删除.deploy文件夹,猜测原因是因为源码部署吧themes添加到了.deploy文件夹种，导致下一次会把主题文件部署上，如果在忽略文件种把themes文件忽略的话源码的提交也会忽略themes文件，暂时没找到解决办法，如有施主知道如何解决麻烦在下方留言给贫道，这种写法没法中间添加操作，所以看第四种吧。 由于hexo生成出来的静态页面带有很多的空格，那么久需要我们对生成的文件来进行压缩，压缩之后再发布以及上传源码，一系列操作每次写完博客还是挺烦的 1234567hexo clean；git g；gulp；hexo d；git add .git commit --all -m 'updata'git push 这个世界不愧是懒人驱动的啊!使用持续集成来吧操作简化，本地只需要负责提交更新到github，由travis得虚拟机来完成一些列的清空，压缩，重新编译，以及部署的操作，下面就开始具体介绍了 1.什么是Travis CITravis CI 是一个的开源持续集成构建项目，它与jenkins的区别在于采用了yaml格式，不需要再本地搭建服务器，并且是高度集成 GitHub 的，所以对于开源项目还是非常友好的。在github上，添加travis ci，当添加的项目有code push的时候，会推送通知到travis，随之根据设置好的脚本文件来执行一系列的程序。 2.准备条件有一个github账号并且搭建好了hexo的静态页面 3.注册Travis CI第一步总是很容易的,打开Travis CI官网,注册或者直接是哟github第三方登录 4.添加Travis CI管理的项目在右上角你的账户名点击进入 profile,在这可以看到你的github里面的项目,选择是需要进行持续集成的项目如果没有看到你的项目你可以是有左边de在Repositories tab页点击Sync now同步你的github项目。选中项目将默认的off改变为on开启项目的持续集成。如果没有你的项目那么应该是还没同步过来点击同步按钮来实现同步然后点击设置,勾选下面者这几项到此 Travis虽然读取到了github文件但是却没权限进行修改和push,我们需要为travis添加一个Access Token 5.创建一个新的Access Token在Github的setting页面，左侧面板选择Developer settings然后Personal access tokens, 右上角点击Generate new token。生成token时候需要确定访问scope，这里我们选择第一个repo即可。重要：生成的token只有第一次可见，一定要保存下来备用。 6.加密Token(可选操作：除非你对于Travis CI保存你的密钥不信任，才需要做，否则可以直接跳过省事) 准备Travis命令行工具，需要依赖ruby环境。对于Windows环境，可以使用这里的安装包，安装完成后可用ruby -v检查。请安装2.4.x版本。注意:不要安装2.5版本。暂时不支持。会报错: 1ERROR: Error installing travis: The last version of ffi (&gt;= 1.3.0) to support your Ruby &amp; RubyGems was 1.9.18. Try installing it with gem install ffi -v 1.9.18 and then running the current command again ffi requires Ruby version &lt; 2.5, &gt;= 2.0. The current ruby version is 2.5.0. 安装命令行工具，参考这里官方文档： 1gem install travis 安装慢的可以使用国内镜像安装 Ruby China 验证travis使用travis -v来验证travis是否安装成功，如果显示版本号则表示安装成功，否则安装失败，重复1，2 登录加密token输入travis login，会提示你需要输入github用户名和密码， 12345678$ travis loginWe need your GitHub login to identify you.This information will not be sent to Travis CI, only to api.github.com.The password will not be displayed.Try running with --github-token or --auto if you don't want to enter your password anyway.Username: xxx@xxx.xxxPassword for xxx@xxx.xxx: Successfully logged in as demo! 登陆成功后，开始加密，代码如下： 1travis encrypt -r &lt;github name&gt;/&lt;github repo&gt; GH_Token=XXX 加密成功会生成一串秘钥，例如：12Please add the following to your .travis.yml file: secure: "OrEeqU0z6GJdC6Sx/XI7AMiQ8NM9GwPpZkVDq6cBHcD6OlSppkSwm6JvopTR\newLDTdtbk/dxKurUzwTeRbplIEe9DiyVDCzkeEiJGfgfq7woh+GRo+q6+UIWLE\n3nowpI9AzXt7iB 把输出的secure:”xxxx”复制保存， 7.添加token把获取到的token或者加密后的token设置到travis上，如下name地方随便输入一个token名字，value地方输入你的token或者加密后的token 8.配置gulpfile因为hexo编译出来的html有大量空白，并且css，js文件都没有进行枷锁，为了性能，使用gulp来对文件进行压缩，当然你可以使用其他方法，由于gulp是在travis虚拟机上运行，本地就没必要再安装了，当然你感兴趣想试试就随便了，配置gulofil.js文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849var gulp = require('gulp');var cleancss = require('gulp-clean-css');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');var imagemin = require('gulp-imagemin'); // 压缩 public 目录 css gulp.task('minify-css', function() &#123; return gulp.src('./public/**/*.css') .pipe(cleancss()) .pipe(gulp.dest('./public'));&#125;);// 压缩 public 目录 htmlgulp.task('minify-html', function() &#123;return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest('./public'))&#125;);// 压缩 public/js 目录 jsgulp.task('minify-js', function() &#123; return gulp.src('./public/**/*.js') .pipe(uglify()) .pipe(gulp.dest('./public'));&#125;); // 压缩图片任务 // 在命令行输入 gulp images 启动此任务 gulp.task('images', function () &#123; // 1. 找到图片 gulp.src('./images/**/*.*') // 2. 压缩图片 .pipe(imagemin(&#123; progressive: true &#125;)) // 3. 另存图片 .pipe(gulp.dest('./images')) &#125;); // 执行 gulp 命令时执行的任务 gulp.task('default', [ 'minify-html','minify-css','minify-js','images' ]); 然后在package.json文件中的dependencies内添加gulp运行依赖的包名12345678910111213141516171819"dependencies": &#123;//添加的文件依赖 "gulp": "^3.9.1", "gulp-clean-css": "^3.9.4", "gulp-htmlclean": "^2.7.22", "gulp-htmlmin": "^4.0.0", "gulp-imagemin": "^4.1.0", "gulp-uglify": "^3.0.0",//end "hexo": "^3.2.0", "hexo-generator-archive": "^0.1.4", "hexo-generator-category": "^0.1.3", "hexo-generator-index": "^0.2.0", "hexo-generator-tag": "^0.2.0", "hexo-renderer-ejs": "^0.3.0", "hexo-renderer-marked": "^0.3.0", "hexo-renderer-stylus": "^0.3.1", "hexo-server": "^0.2.0"&#125; 这样虚拟机在执行npm init的时候救会把gulp所依赖的包安装上 9.配置.travis.yml在博客根目录创建文件.travis.yml,文件种写travis执行的程序代码,可以参考我的12345678910111213141516171819202122232425262728293031language: node_js #使用的语言node_js: stable #版本cache: apt: true directories: - node_modules # 设置缓存不经常更改的内容before_install: - export TZ='Asia/Beijin' # 更改时区install: - npm install #安装hexo及插件 - npm install -g gulp #安装gulpscript: - hexo clean #清除原先的静态文件 - hexo g &amp;&amp; gulp #重新生成并压缩after_script: - cd ./public - git init - git config user.name "chenjiujiu" - git config user.email "cjiujiu@icloud.com" - git add . - git commit -m "Travis CI Auto Builder at `date +"%Y-%m-%d %H:%M"`" # 提交记录包含时间 跟上面更改时区配合 - git push --force --quiet "https://$&#123;ci&#125;@$&#123;GH_REF&#125;" master:master #ci 是在Travis中配置环境变量的名称branches: only: - srcenv: global: - GH_REF: github.com/chenjiujiu/chenjiujiu.github.io.git #设置GH_REF，注意更改yourname 10.到这就差不多结束了在本地修改文件然后使用git命令提交到github源码仓库123git add .git commit -am "测试"git push -u origin master:src 等待几分钟后，travis会自动把public里面的静态文件push到master分支。blog成功部署你可以可以使用travis把博客部署到多个地方，在.travis.yml后继续添加命令即可 后话持续集成有点慢，毕竟需要在虚拟机中clone你的github仓库，然后安装插件，再编译运行，然后把结果push回github，但是这个不影响博客发布了，在本地使用hexo s -debug 测试好 就好了，没那么急这一两分钟上线]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo Next主题配置教程]]></title>
    <url>%2Fblog%2Frjaz-0912103148.html</url>
    <content type="text"><![CDATA[前言依照惯例来一个前言语，上一篇文章中写了hexo的入门，但是hexo默认的主题啊设置啊大大不满足我们的需求，那我们就来进行一些自定义的配置吧 博主用的是next最新版官方主题themes就用next6.0为例，其它主题操作都大同小异next基础配置有文档，都是中文的比较详细，我这就不再重复了nexT中文文档 1.在右上角或者左上角fork me on github 实现效果图: 挑选样式:点击这里或者这里挑选自己喜欢的样式，并复制代码 实现方法:然后粘贴刚才复制的代码到themes/next/layout/_layout.swig文件中(放在&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;的下面)，并把href改为你的github地址 2.点击出现桃心效果效果图:实现方法: 打下这个网址复制页面的代码 在/themes/next/source/js/src里面新建love.js文件并且将刚刚的代码粘贴进去，然后保存。 然后打开\themes\next\layout\_layout.swig文件,在末尾（在前面引用会出现找不到的bug）添加以下代码： 12&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/love.js"&gt;&lt;/script&gt; 3.修改文章底部标签符号效果：方法：修改模板/themes/next/layout/_macro/post.swig，搜索 rel=&quot;tag&quot;&gt;#，将#换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 4.文章末尾统一添加“本文结束”标记效果:方法： 在路径 \themes\next\layout\_macro 中新建 passage-end-tag.swig文件,并添加以下内容： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;-------------本文结束&lt;i class="fa fa-paw"&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 打开\themes\next\layout\_macro\post.swig文件，在post-body 之后， post-footer 之前添加如下代码（post-footer之前两个DIV） 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 然后打开主题配置文件（_config.yml),在末尾添加： 123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 5.修改打赏字体不闪动修改文件next/source/css/_common/components/post/post-reward.styl，然后注释其中的效果wechat:hover和alipay:hover，如下：123456789101112/* 注释文字闪动效果 #wechat:hover p&#123; animation: roll 0.1s infinite linear; -webkit-animation: roll 0.1s infinite linear; -moz-animation: roll 0.1s infinite linear;&#125; #alipay:hover p&#123; animation: roll 0.1s infinite linear; -webkit-animation: roll 0.1s infinite linear; -moz-animation: roll 0.1s infinite linear;&#125;*/ 6.切换中文nexT5.0 打开主题配置文件，最开始设置字段language值为zh-HansnexT6.0 打开主题配置文件，最开始设置字段language值为zh-CN 注意：6.0 的中文模式下如果页面设置了摘要，则在点击阅读全文是控制台会抱一个错，原因是因为地址栏的中文’更多’字样被编码成url了，解决办法就是进入themes/next/languages中吧zh-CN文件的more: 更多改为more: more 7.站点配置文件翻译12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273# Site &lt;站点信息&gt;title: &lt;标题&gt;subtitle: &lt;副标题&gt;description: &lt;描述&gt;keywords: &lt;关键字&gt;author: &lt;作者名字&gt;language: &lt;语言&gt;timezone: &lt;时区 默认您的电脑时区&gt;# URL &lt;网址&gt;## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。url: &lt;网址&gt;root: &lt;根目录 &gt;permalink: &lt;生成文件路径&gt;permalink_defaults: &lt;生成文件缺省路径&gt;source_dir: source &lt;源文件夹，这个文件夹用来存放内容。&gt;public_dir: public &lt;公共文件夹，这个文件夹用于存放生成的站点文件。&gt;tag_dir: tags &lt;标签文件夹&gt;archive_dir: archives &lt;归档文件夹&gt;category_dir: categories &lt;分类文件夹&gt;code_dir: downloads/code &lt;nclude code 文件夹&gt;i18n_dir: :lang &lt;国际化（i18n）文件夹&gt;skip_render: &lt;跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。&gt; # Writing &lt;文章&gt;new_post_name: :title.md &lt; 新建文章默认文件名&gt;default_layout: post &lt; 默认布局&gt;titlecase: false &lt; Transform title into titlecase&gt;external_link: true &lt; 在新标签中打开一个外部链接，默认为true&gt;filename_case: 0 &lt;转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。&gt;render_drafts: false &lt;是否渲染_drafts目录下的文章，默认为false&gt;post_asset_folder: false &lt;启动 Asset 文件夹&gt;relative_link: false &lt;把链接改为与根目录的相对位址，默认false&gt;future: true &lt;显示未来的文章，默认false&gt;highlight: &lt;代码块的设置&gt; enable: true &lt;代码设置开关&gt; line_number: true &lt;显示行数&gt; auto_detect: false &lt;自动高亮某些单词&gt; tab_replace: &lt;多余空格替换&gt; # Home page setting &lt;主页设置&gt;index_generator: path: '' &lt;博客索引页的根路径。(默认= ")&gt; per_page: 10 &lt;首页显示的文章数。(0 =禁用分页)&gt; order_by: -date &lt;文章顺序。(按日期顺序递减)&gt; # Category &amp; Tag &lt;分类和标签的设置&gt;default_category: &lt;默认分类&gt;category_map: &lt;分类地图&gt;tag_map: &lt;标签地图&gt;# Date / Time format &lt;时间日期&gt;date_format: YYYY-MM-DD &lt;日期格式&gt;time_format: HH:mm:ss &lt;时间格式&gt;# Pagination &lt;分页&gt;per_page: 10 &lt;每页显示的文章量 (0 = 关闭分页功能)&gt;pagination_dir: page &lt;分页目录&gt;# Extensions &lt;主题&gt;theme: next &lt;主题名字&gt; # Deployment &lt;部署&gt;deploy: - type: &lt;类型&gt; repo: &lt;仓储url&gt; branch: &lt;分支&gt; ignore_pattern: &lt;忽略文件&gt; extend_dirs: &lt;添加一些扩展目录来发布&gt; ignore_hidden: &lt;是否忽略隐藏文件的发布&gt; 8.主题配置文件翻译123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182cache: enable: true &lt;是否开启缓存&gt;favicon: &lt;站点图标 可以放在hexo文件夹下的/source里&gt; small: /images/favicon.ico medium: /images/avatar.png apple_touch_icon: /images/avatar.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xmlrss: &lt;rss不设置 需要安装插件&gt;footer: since: 2015 &lt;网站时间 从xx开始 类似 2015-2016&gt; icon: &lt;年份和版权之间的图标&gt; name: user &lt;图标名字&gt; animated: false &lt;图标动画&gt; color: "#808080" &lt;图标颜色&gt; copyright: &lt;版权信息&gt; powered: &lt;默认的 hexo链接开关&gt; enable: false version: false theme: &lt;默认的 主题链接开关&gt; enable: false version: falsemenu: #菜单路径设置 如果hexo在二级目录放置要去掉/ home: / archives: /archives &lt;归档&gt; tags: /tags &lt;标签&gt; categories: /categories &lt;分类&gt; about: /about &lt;关于我&gt; commonweal: /404.html &lt;公益404&gt; #sitemap: /sitemap.xml &lt;站点地图&gt;menu_settings:&lt;菜单设置&gt; icons: true &lt;图标开关&gt; badges: true &lt;数量徽章开关&gt;# Schemes&lt;主题设置&gt;#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini&lt;边栏设置&gt;# Posts / Categories / Tags in sidebar.site_state: true# Social Links &lt;其它链接&gt; GitHub: https://github.com/Chenjiujiu || github E-Mail: mailto:cjiujiu@icloud.com || envelope #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skypesocial_icons: &lt;其它链接图标&gt; enable: true &lt;其它链接开关&gt; icons_only: false &lt;是否只显示图标&gt; transition: false &lt;过渡动画&gt; exturl: false # Blog rolls &lt;友情链接&gt;links_icon: link &lt;友情链接图标&gt;links_title: 天帝宝库 &lt;友情链接显示文字&gt;#links_layout: blocklinks_layout: inlinelinks: &lt;友情链接url&gt; 优设: http://www.uisdc.com/ 张鑫旭: http://www.zhangxinxu.com/ Web前端导航: http://www.alloyteam.com/nav/ 前端书籍资料: http://www.36zhen.com/t?id=3448 百度前端技术学院: http://ife.baidu.com/ google前端开发基础: http://wf.uisdc.com/cn/# Sidebar Avatar &lt;边栏头像&gt;avatar: /images/avatar.png &lt;头像文件地址&gt;&lt;边栏文章目录&gt;toc: enable: true &lt;开关&gt; number: false &lt;是否显示目录数&gt; wrap: false &lt;单词是否断行&gt;# Creative Commons 4.0 International License.&lt;版权协议&gt;# http://creativecommons.org/# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero#creative_commons: by-nc-sa#creative_commons:sidebar: position: right &lt;边栏位置&gt; display: post &lt;什么时候显示&gt; #display: always #display: hide #display: remove offset: 12 &lt;边栏偏移&gt; # Back to top in sidebar (only for Pisces | Gemini). b2t: false &lt;回到顶部&gt; # Scroll percent label in b2t button. scrollpercent: false # Enable sidebar on narrow view (only for Muse | Mist). onmobile: false&lt;摘要设置&gt;scroll_to_more: true &lt;滚动显示更多&gt;save_scroll: false &lt;页面缓存滚动的位置&gt;excerpt_description: true &lt;自动从描述截取&gt;&lt;自动截取摘要高度&gt;auto_excerpt: enable: false length: 150&lt;编辑时间设置&gt;post_meta: item_text: true &lt;时间文本&gt; created_at: true &lt;显示创建时间&gt; updated_at: enabled: false &lt;显示更新时间&gt; another_day: true categories: true# Post wordcount display settings# Dependencies: https://github.com/theme-next/hexo-symbols-count-timesymbols_count_time: separated_meta: true item_text_post: true item_text_total: false awl: 4 wpm: 275codeblock: &lt;代码块设置&gt; border_radius: &lt;代码块圆角&gt; copy_button: enable: false &lt;显示复制按钮&gt; show_result: false &lt;显示结果&gt;# Wechat Subscriber#wechat_subscriber: #enabled: true &lt;文章页脚微信订阅开关&gt; #qcode: /path/to/your/wechatqcode ex. /uploads/wechat-qcode.jpg &lt;二维码地址&gt; #description: ex. subscribe to my blog by scanning my public wechat account &lt;文字说明&gt;# Reward &lt;文章页脚打赏开关&gt;reward_comment: &lt;打赏文字&gt;wechatpay: &lt;微信打赏图片&gt;#alipay: &lt;支付宝打赏图片&gt;#bitcoin: &lt;比特币打赏图片&gt;&lt;热门文章设置&gt;# Related popular posts# Dependencies: https://github.com/tea3/hexo-related-popular-postsrelated_posts: enable: false title: # custom header, leave empty to use the default one display_in_home: false params: maxCount: 5 #PPMixingRate: 0.0 #isDate: false #isImage: false #isExcerpt: false &lt;页脚版权信息&gt;# Declare license on postspost_copyright: enable: true license: &lt;a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" rel="external nofollow" target="_blank"&gt;CC BY-NC-SA 4.0&lt;/a&gt;]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 从零开始搭建静态博客]]></title>
    <url>%2Fblog%2Frjaz-0911013118.html</url>
    <content type="text"><![CDATA[前言折腾了几天把博客从Wordpress转到hexo 也从自己的空间转到了Giuhub，其中遇到了各种各样的问题，在此记录一下基本安装流程 1.hexo简单介绍开发者：Hexo是一个开源的静态博客生成器,用node.js开发,作者是台湾tommy351 是什么：她是一个快速、简洁且高效的博客框架。hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页官网：hexoapi:hexo文档 2.准备工具 安装node 安装git 注册一个github账号还没有安装node或者git的小伙伴可以点击链接查看安装指南，在这就不重复介绍了 3.下载和安装hexo使用npm下载并全局安装：1npm install -g hexo hexo的Github地址heox 创建一个文件夹，（不要使用中文名字，会出各种各样的问题，你懂得） 打开命令窗口cd进入刚刚创建的文件夹,window推荐使用git Bash如果你的文件夹路径比较深的话，window可以在目标文件夹内按住shift然后单击鼠标右键，在此处打开命令窗口mac进入文件夹复制文件路径然后把文件路径粘贴到cd 命令之后即可 运行hexo init 如果没有报错的话就已经搭建成功了，是不是很简单啊 hexo文件目录： node_modules：是依赖包 public：存放的是生成的页面 scaffolds：命令生成文章等的模板 source：用命令创建的各种文章 themes：主题 _config.yml：整个博客的配置 db.json：存放一些统计数据之类的 package.json：项目所需模块项目的配置信息 4.运行查看搭建成功后你就可以在本地查看你的blog了，继续在命令窗口输入一下命令 注释不要123hexo clean //清空之前生成的文件hexo generate //编译生成静态网页hexo server //启动本地服务器 没报错的话会提示你会看到这句INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.接着就是打开浏览器输入localhost:4000 来查看你的blog 5.更换主题hexo 默认主题是landscape，你可以在hexo文件内的themes文件夹内看到这个主题更换主题,博主采用的是nexT6.0 主题,简约风格计较适合程序员,集成多个插件。爽的不要不要的,可以根据自己喜好来寻找更换也可以自己制作,这里提供官网的主题链接,Github上也提供了大量主题 1.1下载方式两种方式，下载主题文件或者从github上克隆 1.1.1直接下载直接下载主题文件包，解压到根目录下的/themes文件内，下载一半文件名都带版本号，最好是把文件夹版本号去掉 1.1.2克隆以next为例，其它主题操作都大同小异命令行输入以下代码12$ cd hexo$ git clone https://github.com/theme-next/hexo-theme-next themes/next 6.部署blog当然不能只有本次查看了，所以需要部署到线上这里提供两种部署方式，github和云虚拟主机 6.1部署到GithubGithub每个账户有一个免费的静态站点不用白不用 6.1.1 准备账号 首先需要有github账号，没有的注册一个 6.1.2 创建仓储新建一个仓储用Github名字.github.io的格式来命名你的仓储，格式必须是这样 6.1.4配置git信息配置Github基本信息，具体请在本站右边搜索-Github简单入门 6.1.5安装部署插件由于hexo现在版本吧部署插件分开了，所以需要单独安装部署插件,很简单12依旧是使用npm安装，速度慢可以使用cnpmnpm install hexo-deployer-git --save 你也可以从github上安装最新版本1$ npm install git+ssh://git@github.com:hexojs/hexo-deployer-git.git --save 地址:hexo-deployer-git建议安装新版本，后续部署源码可以简便一下 6.1.6配置项目文件用编辑器打开你的blog项目，修改_config.yml文件的一些配置(冒号之后都是有一个半角空格的)：把地址更换成你刚刚新建的仓储地址，建议是用来git协议来传输12345678910deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 以下是使用git协议deploy: type: git repo: git@github.com:YourgithubName/YourgithubName.github.io.git branch: master 6.1.7开始部署代码命令行输入以下命令来完成部署123hexo clean hexo generatehexo deploy 6.1.8查看部署结果在浏览器中输入http://yourgithubname.github.io就可以看到你的个人博客啦，是不是很兴奋！ 6.2部署到BCH需要有一个云虚拟主机 6.2.1安装插件依旧是相同的 先安装部署插件12依旧是使用npm安装，速度慢可以使用cnpmnpm install hexo-deployer-ftpsync --save 带上github地址 hexo-deployer-ftpsync 6.2.2配置项目文件用编辑器打开你的blog项目，修改_config.yml文件的一些配置(冒号之后都是有一个半角空格的)：12345678910deploy: type: ftpsync host: &lt;host&gt; #主机地址 user: &lt;user&gt; #用户名 pass: &lt;password&gt; #密码 remote: [remote] #上传到空间的指定目录。比如/public_html/。默认为/ port: [port] #端口，默认为21 ignore: [ignore] #忽略的文件 connections: [connections] #使用的连接数，默认1 verbose: [true|false] #显示调试信息，默认false 需要注意的是:hexo-deployer-ftpsync插件并非直接上传生成的静态网站，而是将remote指向的目录的目录结构同步成与本地public文件完全相同的目录结构。也就是说如果你的虚拟主机上存有一些其他文件的话也将被全部删除。所以必要时，可以填写ignore键的值,或者使用子目录.ignore格式：ignore: [‘dir1’,’dir2’,’file1.htm’] 6.2.3预览输入你的虚拟主机对应的域名就可以查看到你不blog了 7.源文件备份如果你是下载了最新版本的部署插件的话则特别简单只需要在部署参数这样设置即可1234567891011deploy: - type: git repo: git@github.com:yougithubname/yougithubname.github.io.git branch: master - type: git repo: git@github.com:yougithubname/yougithubname.github.io.git branch: src extend_dirs: / ignore_hidden: false ignore_pattern: public: . 8.域名绑定如果是部署在github上可以使用github给的域名或者绑定自己的,域名方法如下 在你的域名提供商处给你的域名添加一个CNAME解析，解析地址是yougithubname.github.io 然后到你博客 根目录/source 目录下创建一个新文件CNAME在里面写上你自己的域名，比如我的是blog.chenjijiu.com，就直接在CNAME文件中写上这个地址就好了。注意：CNAME需要大写，文件无后缀名，怎么添加无后缀名的文件自行百度吧 然后执行以下hexo g,hexo d，让后访问你自己的地址就可以跳转到博客了。hexo g就是hexo generate的简写，相同的hexo d是hexo deploy的简写]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html5笔记]]></title>
    <url>%2Fblog%2Fbj-0516024416.html</url>
    <content type="text"><![CDATA[前言HTML5的出现的目的是想要解决目前web上存在的各种问题，包括但不限于以下 1.Web浏览器之间的兼容性很低。2.文档结构不够明确。3.Web应用程序的功能受到限制 1 全局属性全局属性就是指可以对任何元素都使用的属性 1.1 contentEditable属性是由微软开发，功能是允许用户编辑元素的内容，boole值类型,true元素允许编译,可继承1234&lt;ul contenteditable="true"&gt; &lt;li&gt;这个列表是可编辑的&lt;/li&gt; &lt;li&gt;此时isContenteditable为true&lt;/li&gt;&lt;/ul&gt; 1.2 designMode属性用来设置整个页面是否可编辑，只能在js中修改,值为on/off1document.designMode='on'; 1.3 hidden属性通知浏览器不渲染该元素，boole值类型123&lt;ul hidden="hidden"&gt; &lt;li&gt;这个列表是不可见的&lt;/li&gt;&lt;/ul&gt; 1.4 spellcheck属性html针对input和textarea设计的，对输入文本进行语法检查12&lt;input type="text" spellcheck="true"&gt;&lt;!--此时如果input中输入单词有误会有虚线显示--&gt; 1.5 tabindex属性用户连续按下table键时候光标的顺序下面示例连按table键光标会依次在1342的顺序了,当设置为-1时不能通过table获取到焦点默认只有链接或者表单元素能使用table获取焦点，我们可以使用此属性来改变1234&lt;a href="#" tabindex="1"&gt;1&lt;/a&gt;&lt;a href="#" tabindex="4"&gt;2&lt;/a&gt;&lt;a href="#" tabindex="2"&gt;3&lt;/a&gt;&lt;a href="#" tabindex="3"&gt;4&lt;/a&gt; 2 新增的元素 新增的结构元素：section、article、aside、header、hgroup、footer、nav、figure 新增的其它元素：video、audio、embed、mark、progress、meter、time、ruby、rt、rp、wbr、canvas、command、details、datalist、datagrid、keygen、output、source、menu 新增的input元素类型：email、url、number、range、Date Pickers、data、time、datetime、datetime-local、month、week、search、tel、color、 3 表单元素新增属性3.1 表单内元素的form属性可以把表单内的属性书写在任何位置，然后通过该元素指定一个form属性，属性值为该表单的id，来声明该元素从属指定表单1234&lt;form id="testform"&gt; &lt;input type="text"&gt;&lt;/form&gt;&lt;input type="text" form="testform"&gt; 3.2 表单内元素的formaction属性可以为所有的提交按钮增加不同的formaction属性，使单击不同的按钮时可以将表单提交到不同的页面1234&lt;form action="test01.php"&gt; &lt;input type="submit" formaction="test02.php"&gt; &lt;input type="submit" formaction="test03.php"&gt;&lt;/form&gt; 3.3 表单内元素的formmethod属性可以使用formmethod属性对不同的按钮设置不同提交方法1234&lt;form action="test01.php"&gt; &lt;input type="submit" formmethod="get"&gt; &lt;input type="submit" formmethod="post"&gt;&lt;/form&gt; 3.4 表单内元素的formenctype属性可以使用formenctype属性对表单元素指定不同的编码方式12345&lt;form&gt; &lt;input type="text" formenctype="application/x-www-form-urlencoded"&gt; &lt;input type="text" formenctype="multipart/form-data"&gt; &lt;input type="text" formenctype="text/plain"&gt;&lt;/form&gt; 3.5 表单内元素的formtarget属性可以使用formtarget属性对表单元素指定不同的打开方式1234&lt;form action="test01.php"&gt; &lt;input type="submit" formtarget="_blank"&gt; &lt;input type="submit" formtarget="_self"&gt;&lt;/form&gt; 3.6 表单内元素的autofocus属性设置autodocus属性，页面打开时，该控件自动获得焦点1&lt;input type="text" autofocus&gt; 3.7 表单内元素的required属性在提交时如果元素中的内容为空白，则不允许提交，同时浏览器中显示信息提示文字123&lt;form&gt; &lt;input type="text" required="required"&gt;&lt;/form&gt; 3.8 表单内元素的labels属性所有可使用标签的表单元素等定义了一个labels属性，属性值是有何NodeList对象，代表钙元素所绑定的标签元素label的集合1234&lt;input type="text" id="demo"&gt;&lt;label for="demo"&gt;1&lt;/label&gt;&lt;label for="demo"&gt;2&lt;/label&gt;demo.labels为两个标签的集合 3.9 标签的control属性可以在标签内部放置一个表单元素，并且通过该标签的control属性来访问该表单元素1234&lt;label id="demo"&gt; &lt;input type="text"&gt;&lt;/label&gt;可以使用demo.control来找到input元素 4 文本框新增属性4.1 placeholder属性输入提示1&lt;input type="text" placeholder="请输入文字"&gt; 4.2 list属性配合datalist使用，为文本框增加一个list属性list值为datalist的id，在输入时出现下拉提示，提示内容为datalist12345678&lt;form&gt; &lt;input type="text" list="demo"&gt; &lt;datalist id="demo"&gt; &lt;option value="html"&gt;html&lt;/option&gt; &lt;option value="css"&gt;css&lt;/option&gt; &lt;option value="js"&gt;js&lt;/option&gt; &lt;/datalist&gt;&lt;/form&gt; 4.3 AutoComplete属性在表单上添加AutoComplete=&#39;off&#39;来关闭浏览器自动记录输入过的表单值的功能，默认是on的，来提高表单安全性 4.4 pattern属性对表单元素使用pattern属性，属性值为正则表达式，来检查表单输入是否符合格式，不匹配则不允许提交1&lt;input type="text" pattern="[a-z]&#123;6&#125;"&gt; 必须是6个小写字母 4.5 SelectionDirection属性针对input于textarea元素，当用户在其中使用鼠标选择文字是后，可以通过该属性来或者用户选取的方向，正向选取或不选取时值为forward，当用户反向选取是值为backward 4.6 复选框的indeterminate属性通过js脚本设置复选框indeterminate属性，为复选框设置”尚未明确是否选取”的状态123456&lt;input type="checkbox" name="12" value="1"&gt;&lt;input type="checkbox" name="12" value="2"&gt;&lt;script&gt; var inp=document.getElementsByTagName('input')[0]; inp.indeterminate=true&lt;/script&gt; 4.7 表单验证使用html的表单元素类型可自动进行表单验证，可以添加novalidate=”true”取消表单默认验证，自己来处理结果，表单的checkValidity存储验证结果，boole类型1234&lt;form novalidate="true"&gt; &lt;input type="email"&gt;&lt;/form&gt;此时使用input的checkValidity的值来判断是否符合格式 5 增强页面元素5.1 figure、figcaptionfigure表示网页上的一个独立的内容，删除后对网页无影响figcaption是figure元素的标题，需要放在figure元素内部，只能有一个1234&lt;figure&gt; &lt;figcaption&gt;标题&lt;/figcaption&gt; &lt;img src="./img.jpg"&gt;&lt;/figure&gt;]]></content>
      <categories>
        <category>html笔记</category>
      </categories>
      <tags>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git常用命令]]></title>
    <url>%2Fblog%2Fgjsy-0211105835.html</url>
    <content type="text"><![CDATA[前言如果你还不知道git是什么的话建议你看看廖雪峰的git教程，我觉得比较适合新手入门，博主在这就不再重复介绍了，本博客总结一些GIT的常用命令，以备不时之需 1.安装可以从Git官网直接下载安装程序，然后按默认选项安装即可。 2.本地配置2.1配置用户名邮箱全局配置：12$ git config --global user.name "Your Name"$ git config --global user.email "email@example.com" 特定项目配置：12$ git config user.name "Your Name"$ git config user.email "email@example.com" 2.2查看配置信息查看git配置信息列表1$ git config --list 查看git单个配置信息12$ git config user.name$ git config user.email 2.3查看命令手册有三种方法可以找到 Git 命令的使用手册：123456$ git help &lt;verb&gt;$ git &lt;verb&gt; --help$ man git-&lt;verb&gt;$ git help config$ git help push 3.本地仓库3.1创建git仓库1$ git init 3.1添加文件到暂存区可以一次添加多个1git add &lt;file&gt; &lt;file&gt; 添加所有文件，有三个命令，功能细小区别12345$ git add . ：监控工作区的状态树，把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。$ git add -u ：仅监控已经被add的文件，将被修改的文件提交到暂存区。不会提交新文件。（git add --update的缩写）$ git add -A ：是上面两个功能的合集（git add --all的缩写） 取消暂存区文件1git reset HEAD &lt;file&gt;... 3.2暂存区文件提交暂存区文件提交进当前分支1git commit -m "本次提交说明" 添加-a参数来跳过git add直接把所有已经跟踪过的文件暂存起来一并提交1$ git commit -a -m 'added new benchmarks' 添加--amend参数尝试重新提交1234$ git commit -m 'initial commit'$ git add forgotten_file$ git commit --amend最终只会有一个提交记录,第二次提交将代替第一次提交的结果。 3.3查看仓库状态1234git statusgit status -s/ git status --short #将得到一种更为紧凑的格式输出。 状态标记： A 表示新添加 左边M 文件被修改并已添加到暂存区 右边M 文件被修改但未添加到暂存区 3.4忽略文件我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式 所有空行或者以 ＃ 开头的行都会被 Git 忽略。 可以使用标准的glob模式匹配。 匹配模式可以以(/)开头防止递归。 匹配模式可以以(/)结尾指定目录。 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号(!)取反。 glob 模式是指 shell 所使用的简化了的正则表达式。 星号(*)匹配零个或多个任意字符； [abc]匹配任何一个列在方括号中的字符(一个a或一个b或一个c)； 问号(?)只匹配一个任意字符； [0-9] 表示匹配所有 0 到 9 的数字)。 两个星号(**)表示匹配任意中间目录，比如a/**/z 可以匹配 a/z, a/b/z 或 a/b/c/z等。 提示：GitHub 有一个十分详细的针对数十种项目及编程语言的 .gitignore 文件列表，你可以在 http://github.com/github/gitignore 找到它。 3.5查看改动1234$ git diff 只显示尚未暂存的改动$ git diff --cached 查看已经暂存起来的变化$ git diff test 当前目录和另一个叫’test‘分支的差别$ git diff SHA1 SHA2 两个历史版本之间的差异 3.6撤销文件 移除文件=直接删除文件： 1$ git rm test.txt 移除暂存区文件： 1$ git rm --cached test.txt 丢弃工作区，文件恢复到最后一次commit 或者add 时的状态 1$ git checkout -- &lt;file&gt;... 暂存区退回工作区 1$ git reset HEAD 3.7移动文件1git mv 源文件名 目标文件名 相当于123$ mv README.md README 重命名$ git rm README.md 移除老文件$ git add README 添加新文件 3.8提交日志命令：git log参数： -p，显示每次提交的内容差异. -2 仅显示最近两次提交. –stat 显示每次提交的简略的统计信息. –pretty=oneline/short/full/fuller 使用不同格式来显示 –pretty=format 可以定制显示的格式 –graph 显示分支合并记录1234567$ git log$ git log -p$ git log -p -2$ git log --pretty=oneline$ git log --pretty=format:"%h - %an, %ar : %s"f2c1071 - chenjiujiu , 4 minutes ago :test-commit 常见的format选项12345678910111213141516#选项 #说明%H 提交对象(commit)的完整哈希字串%h 提交对象的简短哈希字串%T 树对象(tree)的完整哈希字串%t 树对象的简短哈希字串%P 父对象(parent)的完整哈希字串%p 父对象的简短哈希字串%an 作者(author)的名字%ae 作者的电子邮件地址%ad 作者修订日期(可以用 -date= 选项定制格式)%ar 作者修订日期，按多久以前的方式显示%cn 提交者(committer)的名字%ce 提交者的电子邮件地址%cd 提交日期%cr 提交日期，按多久以前的方式显示%s 提交说明 查看历史命令:1$ git reflog 3.9版本切换HEAD表示当前版本，HEAD^表示上一个版本，HEAD^^表示上两个版本，上10个版本就是就是HEAD～10，可使用commit id进行回退(只需要写前几位)12git reset --hard HEAD^ git reset --hard id 3.10保存工作现场1234567$ git stash //保存 工作区 暂存区$ git stash list //查看$ git stash apply //仅仅取出$ git stash drop //删除$ git stash pop //取出并删除 4.分支管理4.1创建和切换分支1234$ git branch //查看分支$ git branch &lt;name&gt; //新建分支$ git checkout &lt;name&gt; //切换分支$ git checkout -b &lt;name&gt; //新建并且切换分支 4.2删除分支1$ git branch -d &lt;name&gt; //删除某分支 4.3合并分支123456789101112131415161718//合并某分支到当前分支,如果主分支没有修改则会用fast forward快速模式合并$ git merge &lt;name&gt;;$ git merge origin/src//查看分支合并图$ git log --graph //把dev用普通方式合并到当前分支$ git merge --no-ff -m "合并描述" dev //将分支maint合并到当前分支中，但不要自动进行新的提交$ git merge --no-commit maint //合并不相关历史git pull 失败 ,提示：fatal: refusing to merge unrelated histories在进行git pull 时，添加一个可选项git pull origin master --allow-unrelated-histories 4.4删除分支12$ git branch -d &lt;name&gt; //删除某分支$ git branch -D &lt;name&gt; //删除某分支 4.5删除远程分支1$ git push origin --delete dev2 5.远程仓库5.1创建ssh key查看用户目录下有没有.ssh目录和id_rsa，id_rsa.pub两个文件没有的话创建ssh key1$ ssh-keygen -t rsa -C "youname@XXX.com" 一路回车使用默认值在用户目录的.ssh目录下找到以下两个文件id_rsa //私钥id_rsa.pub //公钥 5.2克隆远程仓库12git clone git@github.com:Chenjiujiu/gitdemo.gitgit clone https://github.con/Chenjiujiu/gitdemo.git 5.2远程仓库地址5.2.1添加远程仓库地址可以使用ssh或者https协议，但是https协议速度慢，并且每次推送需要输入口令，建议使用ssh1234git remote add &lt;shortname&gt; &lt;url&gt;git remote add origin-https https://github.con/Chenjiujiu/gitdemo.gitgit remote add origin-git git@github.com:Chenjiujiu/gitdemo.git 5.2.2删除远程仓库地址：12$ git remote rm &lt;shortname&gt;$ git remote rm origin-https 5.2.3查看远程仓库地址1git remote -v 5.3抓取与拉取远程仓库更新5.3.1git fetch从远程仓库中获得数据，不会自动合并或修改当前的工作12$ git fetch [remote-name]$ git fetch origin 5.3.2git pull如果一个分支设置为跟踪一个远程分支，可以使用 git pull 命令来自动的抓取然后合并远程分支到当前分支12$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;$ git pull origin src:master 5.3.2设置追踪关系如果当前分支与远程分支存在追踪关系,就可以省略远程分支名。12$ git branch --set-upstream master origin/src$ git pull origin 5.4推送到远程仓库12$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;$ git push origin master:src 5.4.1删除指定的远程分支如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。123$ git push origin :master等同于$ git push origin --delete master 5.4.2指定默认主机如果当前分支与多个主机存在追踪关系，可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。1$ git push -u origin master 5.4.3推送所有分支1$ git push --all origin 5.4.4强制推送忽略冲突强制推送分支到远程，会在远程产生一个”非直进式”(non-fast-forward)的合并1$ git push --force origin 5.5查看远程仓库1234567891011$ git remote show origin* remote origin Fetch URL: http://git.oschina.net/yiibai/git-start.git Push URL: http://git.oschina.net/yiibai/git-start.git HEAD branch: master Remote branch: master tracked Local branch configured for 'git pull': master merges with remote master Local ref configured for 'git push': master pushes to master (fast-forwardable) 6.标签管理6.1添加标签切换到要打标签的分支12$ git tag &lt;name&gt; //打一个标签$ git tag //查看标签 按照ID 打标签12$ git log //查找到id$ git tag &lt;name&gt; &lt;id&gt; 添加描述的标签1$ git tag -a &lt;tag&gt; -m "描述" &lt;id&gt; 6.2查看标签信息12$ git tag -l$ git show &lt;tag&gt; 6.3删除标签12$ git tag -d &lt;tag&gt; //删除本地标签$ git push origin :refs/tags/&lt;tag&gt; //删除远程标签 6.4推送标签到远程12$ git push origin &lt;tag&gt; //推送单个标签$ git push origin --tags //推送所有标 7.子模块一个单独的git项目存在父项目中，子项目可以有自己的独立的commit，push，pull。而父项目以Submodule的形式包含子项目，父项目可以指定子项目header，父项目中会的提交信息包含Submodule的信息，在clone父项目的时候可以把Submodule初始化。 7.1添加子模块1$ git submodule add &lt;url&gt; 7.2克隆含有子模块的项目先克隆父项目，这时候子模块是空目录，使用如下命令12$ git submodule init$ git submodule update 或者直接在克隆副项目的时候添加参数--recursive它就会自动初始化并更新仓库中的每一个子模块。1$ git clone --recursive http://github.com/chaconinc/MainProject]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法整理]]></title>
    <url>%2Fblog%2Fwdbj-0208083508.html</url>
    <content type="text"><![CDATA[前言最近看到几个小伙伴都是在用Word来写笔记，就随口问了一下他们知不知道Markdown，他们居然一脸闷逼的看着我说不知道，于是想整理Markdown的语法，以便小伙伴们学习，至于介绍就一句话把，Markdown就是一款清量级的文本标记语言，其宗旨就是易读易写，还可以顺带提神逼格 1.空格、换行1.1空格 1.&amp;ensp;或&amp;#8194; 2.&amp;emsp;或&amp;#8195; 3.&amp;nbsp;或&amp;#160; 4.输入法切换到全角,两次空格 1.2换行 1.就像使用html一样可以使用&lt;br&gt;标签 2.在上一行末尾输入两个以上空格然后再回车 2.倾斜代码：1234*这是倾斜* **这是加粗*****这是加粗倾斜***～～这是删除线～～ 效果：这是倾斜这是加粗这是加粗倾斜～～这是删除线～～ 3.标题第一种写法：12345 这是一个一级标题===================== 这是一个二级标题--------------------- 第二种写法：123456#一级标题##二级标题###三级标题####四级标题#####五级标题######六级标题 4.超链接4.1行内式语法说明：[链接文字](链接地址 “可选title属性”)这样的形式。链接地址与链接标题前有一个空格。代码：12欢迎来到[大毛修仙](http://blog.chenjiujiu.com)欢迎来到[大毛修仙](http://blog.chenjiujiu.com "大毛的博客") 效果： 欢迎来到大毛修仙 欢迎来到大毛修仙 4.2参考式参考式一般用在学术论文上面，或者需要果重复使用多次时，它可以让你对链接进行统一的管理 语法说明：参考式链接分为两部分文中的写法[链接文字][链接标记]在文本的任意位置添加[链接标记]:链接地址 “链接标题”，链接地址与链接标题前有一个空格。如果链接文字本身可以做为链接标记，你也可以写成[链接文字][][链接文字]：链接地址的形式. 代码：12345这是我的博客地址[我的博客][1]这是我的github地址[GitHub][][1]:http://blog.chenjiujiu.com "大毛"[GitHub]:http://http://blog.leanote.com/freewalk 效果： 这是我的博客地址我的博客 这是我的github地址GitHub 4.3自我链接语法说明： 使用&lt;&gt;把地址包起来即可 代码：12 &lt;http://blog.chenjiujiu.com&gt; &lt;address@example.com&gt; 效果： http://blog.chenjiujiu.com &#x61;&#x64;&#x64;&#x72;&#101;&#x73;&#115;&#x40;&#x65;&#120;&#97;&#109;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#x6d; 4.4锚点代码：12这里是跳转目的&lt;span id='top'&gt;&lt;/span&gt;跳转到[前言](#top) 效果：跳转到前言 5.列表可以使用html的ul和ol标签来表示列表，或者以下方式 5.1无序列表语法： 使用* + - 表示无序列表代码： 123* 无序列表1+ 无序列表2- 无序列表3 效果： 无序列表1 无序列表2 无序列表3 5.2有序列表语法： 使用数字加一个英文句号表示有序列表代码：1231. 有序列表12. 有序列表23. 有序列表3 效果： 有序列表1 有序列表2 有序列表3 6.引用语法说明： 引用需要在被引用的文本前加上&gt;符号。代码：12&gt; 这是一句引用的话,&gt; 这是一句引用的话. 效果： 这是一句引用的话,这是一句引用的话. Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt;代码：123&gt; 这是一句引用的话, 这是一句引用的话. 这是一句引用的话. 效果： 这是一句引用的话,这是一句引用的话.这是一句引用的话. 6.1多层引用嵌套区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt;代码:123&gt; 请问 Markdwon 怎么用？ - 小白 &gt;&gt; 自己看教程！ - 愤青 &gt;&gt;&gt; 教程在哪？ - 小白 显示效果： 请问 Markdwon 怎么用？ - 小白 自己看教程！ - 愤青 教程在哪？ - 小白 7.图片7.1 行内式语法说明：![图片Alt](图片地址 “图片Title”)代码：1![小和尚](http://blog.chenjiujiu.com/images/pic-markdown/heshan.png "小和尚") 效果： 7.2 参考式语法说明：在文档要插入图片的地方写![图片Alt][标记]在文档的最后写上[标记]:图片地址 “Title”代码：123![和尚][heshan]![heshan]:http://blog.chenjiujiu.com/images/pic-markdown/heshan.png "小和尚" 效果： 8.内容目录 在段落中填写 [TOC] 以显示全文内容的目录结构。 9.脚注语法说明： 在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。 不能直接使用空格，否则无效，请使用以上 空格方式代码：1234使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2][^1]:Markdown是一种纯文本标记语言[^2]:HyperTextMarkupLanguage超文本标记语言 效果： 使用 Markdown^1可以效率的书写文档, 直接转换成 HTML^2 10.math数学公式10.1行内公式语法：用$包裹代码：1这是一个行内公式$\sum_&#123;i=0&#125;^N\int_&#123;a&#125;^&#123;b&#125;g(t,i)\text&#123;d&#125;t$ 显示效果：这是一个行内公式$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$ 10.2块级公式语法：用$$包裹代码：1这是一个块级公式$$\sum_&#123;i=0&#125;^N\int_&#123;a&#125;^&#123;b&#125;g(t,i)\text&#123;d&#125;t$$ 显示效果：这是一个块级公式$$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$$math语法参考]]></content>
      <categories>
        <category>文档编辑</category>
      </categories>
      <tags>
        <tag>Markedown</tag>
      </tags>
  </entry>
</search>
